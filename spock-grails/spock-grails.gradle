import org.grails.gradle.plugin.GrailsTask

buildscript {
  repositories {
    maven { url "http://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:1.1-SNAPSHOT"
  }
  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 24, 'hours'
  }
}

apply plugin: "grails"

dependencies {
  compile project(':spock-grails-support')

  ["plugin-tomcat", "plugin-datasource", "plugin-services", "hibernate"].each { module ->
    compile("org.grails:grails-$module:$grailsVersion")
  }

  // Needed by release plugin
  compile "org.apache.maven:maven-ant-tasks:2.1.0"

  compile "org.codehaus.groovy.modules.http-builder:http-builder:0.5.0", {
    exclude module: "xml-apis"
  }

  compile "org.tmatesoft.svnkit:svnkit:1.3.5", {
    exclude module: "jna"
    exclude module: "trilead-ssh2"
    exclude module: "sqljet"
  }
}

// Used in BuildConfig to selectively list specify dependencies
System.setProperty("spock.building", "true")
System.setProperty("grails.full.stacktrace", "true")

def findTemplatedFiles = {
  def files = [:]
  projectDir.eachFileRecurse { inputFile ->
    if (!inputFile.name.endsWith(".in")) return
    files[inputFile] = new File(inputFile.parentFile, inputFile.name[0..-4])
  }
  files
}

task createTemplatedFiles << {
  def templateVariables = [
    "grails-version": project.grailsVersion,
    "spock-version": project.spockVersion,
    "plugin-version": project.version
  ]

  findTemplatedFiles().each { inputFile, outputFile ->
    def input = inputFile.getText("UTF-8")
    templateVariables.each { k, v ->
      input = input.replace("@$k@", v)
    }
    outputFile.setText(input, "UTF-8")
  }
}

tasks.withType(GrailsTask) { task ->
  if (task.name != "clean") task.dependsOn(createTemplatedFiles)
}

task clean(type: Delete, overwrite: true) { task ->
  delete buildDir
  delete "target"
  delete "plugin.xml"

  projectDir.eachFile {
    if (it.name.endsWith(".zip")) {
      task.delete(it)
    }
  }

  findTemplatedFiles().each { inputFile, outputFile ->
    task.delete(outputFile)
  }

  projectDir.eachDirRecurse {
    if (it.exists() && it.list().size() == 0) {
      task.delete(it)
    }
  }
}

task release(type: GrailsTask) {
  command "publish-plugin"
  configuration "compile"
  useRuntimeClasspathForBootstrap true

  args "--noScm"
  if (project.version.endsWith("-SNAPSHOT")) args += " -snapshot"

  doFirst {
    System.setProperty("spock.releasing", "true")
  }

  doLast {
    System.clearProperty("spock.releasing")
  }
}
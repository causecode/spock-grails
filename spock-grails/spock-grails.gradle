import org.grails.gradle.plugin.GrailsTask

buildscript {
  repositories {
    mavenLocal()
    mavenRepo name: "Grails Repo", urls: "http://repo.grails.org/grails/repo"
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:1.1-SNAPSHOT"
  }
}

apply plugin: "grails"

grailsHome = file("grails-home").absolutePath

configurations {
  compile.exclude module: "commons-logging"
  compile.exclude module: 'xml-apis'
  compile.exclude module: "groovy"
  compile.exclude module: 'org.springframework.uaa.client'
  bootstrap.exclude module: "org.springframework.uaa.client"
  bootstrap.exclude module: "xml-apis"
  bootstrap.exclude group: "org.slf4j"
  compile.exclude group: "org.slf4j"
}

configurations {
  upload
}

dependencies {
  logging "commons-logging:commons-logging:1.1.1", "org.slf4j:jcl-over-slf4j:1.6.1"
  
  compile project(':spock-grails-support')
  
  runtime "hsqldb:hsqldb:1.8.0.5"  
  runtime "net.sf.ehcache:ehcache-core:1.7.1"
  
  def grailsPlugins = { String[] plugins -> plugins.collect { "org.grails:grails-plugin-$it:$grailsVersion" } }
  test grailsPlugins("tomcat", "i18n", "datasource", "services")
  test("org.grails:grails-hibernate:$grailsVersion")
  
  // Needed by release plugin
  compile "org.apache.maven:maven-ant-tasks:2.1.0",
          "org.codehaus.groovy.modules.http-builder:http-builder:0.5.0"
          
  compile "org.tmatesoft.svnkit:svnkit:1.3.5", {
    exclude module: "jna"
    exclude module: "trilead-ssh2"
    exclude module: "sqljet"
  }
  
}

// Used in BuildConfig to selectively list specify dependencies 
System.setProperty("spock.building", "true") 
System.setProperty("grails.full.stacktrace", "true")

def findTemplatedFiles = {
  def files = [:]
  projectDir.eachFileRecurse { inputFile ->
    if (!inputFile.name.endsWith(".in")) return
    files[inputFile] = new File(inputFile.parentFile, inputFile.name[0..-4])
  }
  files
}

task createTemplatedFiles << {
  def templateVariables = [
    "grails-version": project.grailsVersion,
    "plugin-version": project.version
  ]
  
  findTemplatedFiles().each { inputFile, outputFile ->
    def input = inputFile.getText("UTF-8")
    templateVariables.each { k, v ->
      input = input.replace("@$k@", v)
    }
    outputFile.setText(input, "UTF-8")
  }
}

tasks.withType(GrailsTask) { task ->
  if (task.name != "clean") task.dependsOn(createTemplatedFiles)
}

task clean(type: Delete, overwrite: true) { task ->
  delete buildDir
  delete "target"
  delete "plugin.xml"
  
  projectDir.eachFile {
    if (it.name.endsWith(".zip")) {
      task.delete(it)
    }
  }

  findTemplatedFiles().each { inputFile, outputFile ->
    task.delete(outputFile)
  }
  
  projectDir.eachDirRecurse {
    if (it.exists() && it.list().size() == 0) {
      task.delete(it)
    }
  }
}

task uploadArchives(type: GrailsTask, dependsOn: "assemble") {
  command "publish-plugin"
  configuration "compile"
  useRuntimeClasspathForBootstrap true
  
  args "--noScm"
  if (project.version.endsWith("-SNAPSHOT")) args += " -snapshot"    
}
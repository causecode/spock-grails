import org.grails.gradle.plugin.*

apply plugin: "base"

buildscript {
  repositories { maven { url "http://repo.grails.org/grails/core" } }
  dependencies.classpath "org.grails:grails-gradle-plugin:1.1.1-SNAPSHOT"
}

System.setProperty("spock.building", "true")
System.setProperty("grails.full.stacktrace", "true")

pluginVersion = version
pluginGrailsVersion = "2.0.0"
pluginSpockVersion = "$version-groovy-1.8"
if (isSnapshot) {
  pluginVersion += "-SNAPSHOT"
  pluginSpockVersion += "-SNAPSHOT"
}

grailsDependency = { module, grailsVersion -> "org.grails:grails-$module:$grailsVersion" }

configureBaseGrailsClasspath = { grailsVersion, configuration ->
  GrailsDependenciesUtil.configureBootstrapClasspath(project, grailsVersion, configuration)
}

configurations {
  configureBaseGrailsClasspath(pluginGrailsVersion, pluginBootstrap)
}

dependencies {
  pluginBootstrap files("log4j")
  pluginBootstrap "org.apache.maven:maven-ant-tasks:2.1.0"
  pluginBootstrap "org.codehaus.groovy.modules.http-builder:http-builder:0.5.0", {
    exclude module: "xml-apis"
    exclude module: "groovy"
  }
  pluginBootstrap "org.tmatesoft.svnkit:svnkit:1.3.5", {
    exclude module: "jna"
    exclude module: "trilead-ssh2"
    exclude module: "sqljet"
  }
}

class SetupGrailsProject extends Sync {
  Map props = [:]
  
  SetupGrailsProject() {
    eachFile { file ->
      if (file.name.endsWith(".in")) {
        file.expand props
        file.name = file.name[0..-4]
      }
    }
    
    doLast {
      project.file("$destinationDir/src/java").mkdirs()
    }
  }
}

project.SetupGrailsProject = SetupGrailsProject
project.GrailsTask = GrailsTask

task setupPlugin(type: SetupGrailsProject) {
  from "plugin"
  into "$buildDir/plugin"
  props grailsVersion: pluginGrailsVersion,
        spockVersion: pluginSpockVersion,
        pluginVersion: pluginVersion
}

tasks.withType(GrailsTask).matching { it.name.endsWith("Plugin") }.all {
  dependsOn setupPlugin
  projectDir setupPlugin.destinationDir
  targetDir "${setupPlugin.destinationDir}/target"
  
  bootstrapClasspath = configurations.pluginBootstrap
  bootstrapRuntimeClasspath = configurations.pluginBootstrap
  compileClasspath = project.files()
  runtimeClasspath = project.files()
  testClasspath = project.files()
}

task packagePlugin(type: GrailsTask, dependsOn: setupPlugin) {
  command "package-plugin"
}

task releasePlugin(type: GrailsTask, dependsOn: packagePlugin) {
  command "publish-plugin"

  args "--non-interactive --noScm --repository=grailsCentral --portal=grailsCentral"
  if (pluginVersion.endsWith("-SNAPSHOT")) args += " --snapshot"

  doFirst { System.setProperty("spock.releasing", "true") }
  doLast { System.clearProperty("spock.releasing") }
}

task test(dependsOn: tasks.withType(GrailsTask).matching { it.command == "test-app" })
task check(dependsOn: test)
task assemble(dependsOn: packagePlugin, overwrite: true)
task build(dependsOn: [check, assemble])

apply from: "gradle/testWithGrails2.gradle"
apply from: "gradle/testWithGrails13.gradle"
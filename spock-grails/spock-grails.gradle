import org.grails.gradle.plugin.*

apply plugin: "base"

buildscript {
  repositories { maven { url "http://repo.grails.org/grails/core" } }
  dependencies.classpath "org.grails:grails-gradle-plugin:1.1.1-SNAPSHOT"
}

System.setProperty("spock.building", "true")
System.setProperty("grails.full.stacktrace", "true")

def pluginVersion = version
def pluginGrailsVersion = "2.0.0"
def pluginSpockVersion = "$version-groovy-1.8"
if (isSnapshot) {
  pluginVersion += "-SNAPSHOT"
  pluginSpockVersion += "-SNAPSHOT"
}

def grailsDependency = { module, grailsVersion -> "org.grails:grails-$module:$grailsVersion" }

configurations {
  GrailsDependenciesUtil.configureBootstrapClasspath(project, pluginGrailsVersion, pluginBootstrap)
}

dependencies {
  pluginBootstrap "org.slf4j:slf4j-jcl:1.6.4"
  pluginBootstrap "org.apache.maven:maven-ant-tasks:2.1.0"
  pluginBootstrap "org.codehaus.groovy.modules.http-builder:http-builder:0.5.0", {
    exclude module: "xml-apis"
    exclude module: "groovy"
  }
  pluginBootstrap "org.tmatesoft.svnkit:svnkit:1.3.5", {
    exclude module: "jna"
    exclude module: "trilead-ssh2"
    exclude module: "sqljet"
  }
}

class SetupGrailsProject extends Sync {
  Map props = [:]
  
  SetupGrailsProject() {
    eachFile { file ->
      if (file.name.endsWith(".in")) {
        file.expand props
        file.name = file.name[0..-4]
      }
    }
  }
}

task setupPlugin(type: SetupGrailsProject) {
  from "plugin"
  into "$buildDir/plugin"
  props grailsVersion: pluginGrailsVersion,
        spockVersion: pluginSpockVersion,
        pluginVersion: pluginVersion
}

tasks.withType(GrailsTask).matching { it.name.endsWith("Plugin") }.all {
  dependsOn setupPlugin
  projectDir setupPlugin.destinationDir
  targetDir "${setupPlugin.destinationDir}/target"
  
  bootstrapClasspath = configurations.pluginBootstrap
  bootstrapRuntimeClasspath = configurations.pluginBootstrap
  compileClasspath = project.files()
  runtimeClasspath = project.files()
  testClasspath = project.files()
}

task packagePlugin(type: GrailsTask, dependsOn: setupPlugin) {
  command "package-plugin"
}

task releasePlugin(type: GrailsTask, dependsOn: packagePlugin) {
  command "publish-plugin"

  args "--non-interactive --noScm --repository=grailsCentral --portal=grailsCentral"
  if (pluginVersion.endsWith("-SNAPSHOT")) args += " --snapshot"

  doFirst { System.setProperty("spock.releasing", "true") }
  doLast { System.clearProperty("spock.releasing") }
}

def grails13Version = "1.3.7"

task setupTestApp13(type: SetupGrailsProject, dependsOn: packagePlugin) {
  from "test-app"
  into "$buildDir/test-app-grails-1.3"
  from ("$setupPlugin.destinationDir") {
    include "*.zip"
    into "plugins"
  }
  props grailsVersion: grails13Version, pluginVersion: pluginVersion, pluginsDir: "$destinationDir/plugins"
}

configurations {
  compile13.exclude module: 'xml-apis'
  runtime13.extendsFrom compile13
  test13.extendsFrom runtime13
  GrailsDependenciesUtil.configureBootstrapClasspath(project, grails13Version, bootstrap13)
}

dependencies {
  bootstrap13 grailsDependency("core", grails13Version)
  test13 project(path: ":spock-grails-support", configuration: "groovy17Runtime")  
  runtime13 "org.grails:grails-crud:${grails13Version}"
  runtime13 "org.grails:grails-gorm:${grails13Version}"
  runtime13 "hsqldb:hsqldb:1.8.0.5"
  runtime13 "net.sf.ehcache:ehcache-core:1.7.1"
  runtime13 "org.aspectj:aspectjrt:1.6.6"
}

tasks.withType(GrailsTask).matching { it.name.endsWith("13") }.all {
  dependsOn setupTestApp13
  projectDir setupTestApp13.destinationDir
  targetDir "${setupTestApp13.destinationDir}/target"
  
  bootstrapClasspath = configurations.bootstrap13
  bootstrapRuntimeClasspath = configurations.bootstrap13
  compileClasspath = configurations.compile13
  runtimeClasspath = configurations.runtime13
  testClasspath = configurations.test13
}

task installPlugin13(type: GrailsTask) {
  command "install-plugin"
  args "$setupPlugin.destinationDir/grails-spock-${pluginVersion}.zip"
}

task test13(type: GrailsTask, dependsOn: installPlugin13) {
  command "test-app"
}

def grails2Version = "2.0.0"

task setupTestApp2(type: SetupGrailsProject, dependsOn: packagePlugin) {
  from "test-app"
  into "$buildDir/test-app-grails-2"
  from ("$setupPlugin.destinationDir") {
    include "*.zip"
    into "plugins"
  }
  props grailsVersion: grails2Version, pluginVersion: pluginVersion, pluginsDir: "$destinationDir/plugins"
}

configurations {
  compile2.exclude module: 'xml-apis'
  runtime2.extendsFrom compile2
  test2.extendsFrom runtime2
  GrailsDependenciesUtil.configureBootstrapClasspath(project, grails2Version, bootstrap2)
}

dependencies {
  ["plugin-tomcat", "plugin-datasource", "plugin-services", "hibernate"].each { module ->
    compile2 grailsDependency(module, grails2Version)
  }
  test2 project(path: ":spock-grails-support", configuration: "groovy18Runtime")  
}

tasks.withType(GrailsTask).matching { it.name.endsWith("2") }.all {
  dependsOn setupTestApp2
  projectDir setupTestApp2.destinationDir
  targetDir "${setupTestApp2.destinationDir}/target"
  
  bootstrapClasspath = configurations.bootstrap2
  bootstrapRuntimeClasspath = configurations.bootstrap2
  compileClasspath = configurations.compile2
  runtimeClasspath = configurations.runtime2
  testClasspath = configurations.test2
}

task installPlugin2(type: GrailsTask) {
  command "install-plugin"
  args "$setupPlugin.destinationDir/grails-spock-${pluginVersion}.zip"
}

task test2(type: GrailsTask, dependsOn: installPlugin2) {
  command "test-app"
}

task test(dependsOn: [test13, test2])
task check(dependsOn: test)
task assemble(dependsOn: packagePlugin, overwrite: true)
task build(dependsOn: [check, assemble])
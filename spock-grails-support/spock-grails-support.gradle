apply plugin: "java-base"
apply plugin: "maven"
apply plugin: "idea"
apply plugin: "signing"

description = "Spock Framework - Grails Plugin Support"

sourceSets.all {
  it.convention.plugins.put("groovy", new org.gradle.api.internal.tasks.DefaultGroovySourceSet(it.getDisplayName(), project.getFileResolver()))
}

task install(type: Upload) {
  configuration = configurations.archives
  ext.mavenInstaller = repositories.mavenInstaller()
}

uploadArchives {
  ext.mavenDeployer = repositories.mavenDeployer {
    if (isSnapshot) {
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        if (project.hasProperty("sonatypeOssUsername")) {
          authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
        }
      }
    } else {
      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        if (project.hasProperty("sonatypeOssUsername")) {
          authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
        }
      }
    }
  }
}

signing {
  sign configurations.archives
  required { !isSnapshot && gradle.taskGraph.hasTask(uploadArchives) }
  [install.mavenInstaller, uploadArchives.mavenDeployer]*.beforeDeployment { signPom(it) }
}

ext.poms = []

["18", "20"].each { name ->
  def named = { "groovy${name}${it.capitalize()}"}
  def thisSpockVersion = spockVersion("${name[0]}.${name[1]}")

  [
    (named("groovy")): [],
    (named("compile")): [named("groovy")],
    (named("runtime")): [named("compile")]
  ].each { configurationName, parents ->
    configurations.archives.extendsFrom(configurations.add(configurationName) {
      parents.each {
        extendsFrom configurations.getByName(it)
      }
    })
  }

  def classesDir = file("$buildDir/$name/classes")

  sourceSets {
    add(name) {
      groovy.srcDir "src/main/groovy"
      compileClasspath = configurations[named("compile")]
      runtimeClasspath = configurations[named("runtime")]
      compiledBy named("compile")
      output.classesDir = classesDir
    }
  }

  task(named("compile"), type: GroovyCompile) {
    source sourceSets[name].groovy
    destinationDir classesDir
    classpath = configurations[named("compile")]
    groovyClasspath = configurations[named("groovy")]
  }

  task(named("jar"), type: Jar) {
    from tasks[named("compile")]
    version thisSpockVersion
  }

  task(named("groovydoc"), type: Groovydoc) {
    source sourceSets[name].groovy
    classpath = sourceSets[name].output + configurations[named("compile")]
    groovyClasspath = configurations[named("groovy")]
    destinationDir file("$buildDir/$name/groovydoc")
    docTitle "Spock Grails Support - $thisSpockVersion"
    windowTitle docTitle
  }

  task(named("javadocJar"), type: Jar) {
    classifier "javadoc"
    version thisSpockVersion
    from tasks[named("groovydoc")]
  }

  task(named("sourcesJar"), type: Jar) {
    classifier "sources"
    version thisSpockVersion
    from sourceSets[name].allSource
  }

  artifacts {
    add named("runtime"), tasks[named("jar")]
    archives tasks[named("javadocJar")], tasks[named("sourcesJar")]
  }

  configure([install.mavenInstaller, uploadArchives.mavenDeployer]) {
    def pom = addFilter(named("pom")) { artifact, file -> file.name.contains(thisSpockVersion) }
    ["compile", "runtime"].each { pom.scopeMappings.addMapping 1, configurations[named(it)], it }
    pom.version = thisSpockVersion
    poms << pom
  }
}

repositories {
  mavenLocal()
}

dependencies {
  groovy18Groovy "org.codehaus.groovy:groovy-all:1.8.6"
  groovy18Compile "org.spockframework:spock-core:${spockVersion("1.8")}", {
    exclude module: "groovy-all"
  }
  groovy18Compile "org.slf4j:slf4j-log4j12:1.6.0"
  ["test", "plugin-testing"].each { module ->
    groovy18Compile("org.grails:grails-$module:2.0.0")
  }

  groovy20Groovy "org.codehaus.groovy:groovy-all:2.0.5"
  groovy20Compile "org.spockframework:spock-core:${spockVersion("2.0")}", {
    exclude module: "groovy-all"
  }
  groovy20Compile "org.slf4j:slf4j-log4j12:1.6.0"
  ["test", "plugin-testing", "web", "core"].each { module ->
    groovy20Compile("org.grails:grails-$module:2.2.0.RC1")
  }
}

task classes(dependsOn: tasks.withType(AbstractCompile))

ext.modifyPom = { Closure modification ->
  project.poms.each {
    it.whenConfigured(modification)
  }
}

modifyPom {
  it.project {
    name project.description
    url "http://spockframework.org"
    description "Integrates the Spock Framework with the Grails Framework"

    licenses {
      license {
        name "The Apache Software License, Version 2.0"
        url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        distribution "repo"
      }
    }

    scm {
      connection "scm:git:git://github.com/spockframework/spock.git"
      developerConnection "scm:git:ssh://git@github.com/spockframework/spock.git"
      url "http://code.google.com/p/spock/source/browse"
    }

    developers {
      developer {
        id "pniederw"
        name "Peter Niederwieser"
        email "pniederw@gmail.com"
      }

      developer {
        id "ldaley"
        name "Luke Daley"
        email "ld@ldaley.com"
      }
    }
  }

  it.dependencies.removeAll(it.dependencies.findAll { it.groupId != "org.spockframework" })
  def exclusionClass = it.dependencies[0].class.classLoader.loadClass("org.apache.maven.model.Exclusion")
  it.dependencies[0].exclusions = [exclusionClass.newInstance(artifactId: "groovy-all", groupId: "org.codehaus.groovy")]
}